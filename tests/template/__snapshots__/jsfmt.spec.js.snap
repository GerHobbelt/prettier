// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`comment.js 1`] = `
\`
(?:\${escapeChar}[\\\\S\\\\s]|(?:(?!\${// Using \`XRegExp.union\` safely rewrites backreferences in \`left\` and \`right\`.
// Intentionally not passing \`basicFlags\` to \`XRegExp.union\` since any syntax
// transformation resulting from those flags was already applied to \`left\` and
// \`right\` when they were passed through the XRegExp constructor above.
XRegExp.union([left, right], '', {conjunction: 'or'}).source})[^\${escapeChar}])+)+
\`;

\`a\${/* b */c/* d */}e\${// f
g
// h
}\`;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
\`
(?:\${escapeChar}[\\\\S\\\\s]|(?:(?!\${/* Using \`XRegExp.union\` safely rewrites backreferences in \`left\` and \`right\`.*/
// Intentionally not passing \`basicFlags\` to \`XRegExp.union\` since any syntax
// transformation resulting from those flags was already applied to \`left\` and
// \`right\` when they were passed through the XRegExp constructor above.
XRegExp.union([left, right], "", {
  conjunction: "or"
}).source})[^\${escapeChar}])+)+
\`;

\`a\${/* b */ /* d */ c}e\${/* f*/
g}// h
\`;

`;

exports[`faulty-locations.js 1`] = `
var o = {
  [\`key\`]: () => {
    // Comment
  }
};

var x = {
  y: () => Relay.QL\`
    query {
      \${foo},
      field,
    }
  \`
};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
var o = {
  [\`key\`]: () => {
    // Comment
  }
};

var x = {
  y: () => Relay.QL\`
    query {
      \${foo},
      field,
    }
  \`
};

`;

exports[`parenthesis.js 1`] = `
// "ArrowFunctionExpression"
(() => {})\`\`;

// "AssignmentExpression"
(b = c)\`\`;

// "AwaitExpression"
async function f() {
  (await b)\`\`;
}

// "BinaryExpression"
(b + c)\`\`;

// "CallExpression"
b()\`\`;

// "ClassExpression"
(class {})\`\`;

// "ConditionalExpression"
(b ? c : d)\`\`;

// "FunctionExpression"
(function() {})\`\`;

// "LogicalExpression"
(b || c)\`\`;

// "MemberExpression"
b.c\`\`;

// "NewExpression"
(new B())\`\`;

// "ObjectExpression"
({})\`\`;

// "SequenceExpression"
(b, c)\`\`;

// "TaggedTemplateExpression"
(\`\`)\`\`;

// "UnaryExpression"
(void b)\`\`;

// "UpdateExpression"
(++b)\`\`;

// "YieldExpression"
function* f() {
  (yield 1)\`\`;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// "ArrowFunctionExpression"
(() => {})\`\`;

// "AssignmentExpression"
(b = c)\`\`;

// "AwaitExpression"
async function f() {
  (await b)\`\`;
}

// "BinaryExpression"
(b + c)\`\`;

// "CallExpression"
b()\`\`;

// "ClassExpression"
(class {}\`\`);

// "ConditionalExpression"
(b ? c : d)\`\`;

// "FunctionExpression"
(function() {})\`\`;

// "LogicalExpression"
(b || c)\`\`;

// "MemberExpression"
b.c\`\`;

// "NewExpression"
new B()\`\`;

// "ObjectExpression"
({}\`\`);

// "SequenceExpression"
(b, c)\`\`;

// "TaggedTemplateExpression"
\`\`\`\`;

// "UnaryExpression"
(void b)\`\`;

// "UpdateExpression"
(++b)\`\`;

// "YieldExpression"
function* f() {
  (yield 1)\`\`;
}

`;
